name: CI

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
    paths-ignore:
      - "docs/**"
      - "README.md"

env:
  CARGO_TERM_COLOR: always

jobs:
  build:
    runs-on: ${{ matrix.config.os }}
    strategy:
      matrix:
        config:
          - os: "ubuntu-latest"
            platformAgnosticChecks: true
          - {
            os: "macos-latest",
            arch: "amd64"
          }
          - {
            os: macos-latest,
            arch: aarch64,
            extraArgs: "--target aarch64-apple-darwin"
          }
          - os: "windows-latest"
            extension: ".exe"

    steps:
      # 
      # Update build environment
      #
      - uses: actions/checkout@v2
      
      - uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
      
      - uses: Swatinem/rust-cache@v1
      
      # 
      # Install build tools
      #

      - name: "Install make tool on Windows"
        run: choco install make -y
        if: ${{ fromJSON(matrix.config.os == 'windows-latest') }}
      
      - name: "Install Dependencies on Linux"
        run: make install-deps
        if: ${{ fromJSON(matrix.config.os == 'ubuntu-latest') }}

      - name: "Install Dependencies on MacOS"
        run: make install-deps-macos
        if: ${{ fromJSON(matrix.config.os == 'macos-latest') }}

      - name: "Install Dependencies on Windows"
        run: |
          choco install wget
          wget -O wasi-sdk-15.0-mingw.tar.gz https://github.com/WebAssembly/wasi-sdk/releases/download/wasi-sdk-15/wasi-sdk-15.0-mingw.tar.gz
          tar -xvzf wasi-sdk-15.0-mingw.tar.gz
          mkdir -p /opt/wasi-sdk
          mv wasi-sdk-15.0/* /opt/wasi-sdk/
          make install-deps-win
          ls /opt/wasi-sdk/bin/
        if: ${{ fromJSON(matrix.config.os == 'windows-latest') }}
        
      
      - name: "Install Rust Wasm targets"
        run: |
          rustup target add wasm32-wasi
          rustup target add wasm32-unknown-unknown
          rustup target add aarch64-apple-darwin  

      - name: "Install wit-bindgen-cli"
        run: cargo install --git https://github.com/bytecodealliance/wit-bindgen wit-bindgen-cli --tag v0.2.0                         
      
      #
      # Build
      #
      - name: "Run clippy and fmt"
        run: make improve        
        if: ${{ matrix.config.platformAgnosticChecks }}

      - name: "Build SpiderLightning and Slight"
        run: make build
        if: ${{ matrix.config.platformAgnosticChecks }}

      - name: "Build SpiderLightning and Slight"
        run: make build
        if: ${{ fromJSON(matrix.config.os == 'macos-latest') && 
          fromJSON(matrix.config.arch == 'amd64') }}

      - name: "Build SpiderLightning and Slight"
        run: cargo build --manifest-path ./slight/Cargo.toml --release ${{ matrix.config.extraArgs }}
        if: ${{ fromJSON(matrix.config.os == 'macos-latest') && 
          fromJSON(matrix.config.arch == 'aarch64') }}

      - name: "Build SpiderLightning and Slight"
        run: make build
        if: ${{ fromJSON(matrix.config.os == 'windows-latest') }}
        env:
          OPENSSL_DIR: C:\Program Files\OpenSSL-Win64\
          OPENSSL_NO_VENDOR: true
          
      - name: "Build Rust Examples"
        run: make build-rust

      - name: "Build C Examples"
        run: | 
          ls /opt/wasi-sdk/bin/
          make build-c
        if: ${{ fromJSON(matrix.config.os != 'windows-latest') }}
      
      - name: "Build C Examples"
        run: |
          ls /opt/wasi-sdk/bin/
          make build-c-win
        if: ${{ fromJSON(matrix.config.os == 'windows-latest') }}

      #
      # Run Unit Tests
      #
      - name: "Run Unit Tests"
        run: make test
        if: ${{ matrix.config.platformAgnosticChecks }}

      - name: "Run Unit Tests"
        run: make test
        if: ${{ fromJSON(matrix.config.os == 'macos-latest') }}

      - name: "Run Unit Tests"
        run: make test
        if: ${{ fromJSON(matrix.config.os == 'windows-latest') }}
        env:
          OPENSSL_DIR: C:\Program Files\OpenSSL-Win64\
          OPENSSL_NO_VENDOR: true